''Last Updated 06 July 2009''

The intention of this document is to bring together and add to all the documentation available on the WWW for the DAS system. The content on these pages draws from many sources of information and thus has many contributors. Eventually the intention if that this document will be a set of instructions that you can print out and use as reference documentation or a good read. If you find any errors on these pages and pages that it links to then please contact me ([mailto:jw12@sanger.ac.uk Jonathan Warren]) to let me know. Any suggestions and contributions are also welcomed. As this is now in wiki form you can log in and edit/add things yourself.

== What is DAS? ==

As biological databases are becoming so large with the advent of high throughput technologies such as sequencers and microarray chips it is becoming increasing difficult to download all the data relevant for a research team. DAS gets around this by keeping the data stored with it's originators and allows users around the world to access just the relevant parts they need at any one time. Put another way: by making use of DAS you can take advantage of being able to view integrated information from multiple sources, without these sources needing to be aware of each other. You can also add your own DAS data source, perhaps privately in your own institution and then view the information served from this source in the context of features from other institutions. DAS stands for Distributed Annotation System. It was originally set up to be used with genomic information where annotations/features are layered on top of a reference sequence , usually a genome. The idea is that a genome browser such as ensembl or GBrowse (both DAS clients in this scenario) can be used to look at annotations from data sources both that exist on the same server/machine the browser is running on and display annotations in the same view from data sources (data served by DAS servers) that could be on the other side of the world (communicating via the WWW). The DAS system consists of the DAS Registry www.dasregistry.org as well as DAS Servers and Clients. The Registry is there to enable people and computers to easily find the DAS data sources available around the world and also to help these data sources conform to the specifications. It's important that data served by DAS servers conform to enable the interoperability of different clients and servers around the world.[http://www.biodas.org/documents/spec.html 1.0] is currently supported and work is starting on supporting the new [http://www.biodas.org/wiki/DAS1.6  The 1.6 spec] that is the latest and soon to be official DAS spec that mainly focuses on genomic annotations but also refers to the ''E''xtentions specified in the 1.53''E'' spec below. [http://www.dasregistry.org/spec_1.53E.jsp  The 1.53E spec] contains up to date specifications for servers and clients that support information that can be exchanged using DAS that is not genome centric. Types of data include Proteins- Structures and alignments, Molecular Interactions, volume map data.

=== Current Status/ DAS specifications 1.5, 1.53E, 1.6, 2.0 and Future Intentions ===

Currently DAS 1.5 is the most widely used and supported together with 1.53E. DAS 2.0 is quite different and is really running in parallel to the other 2 versions of DAS. After the 2009 workshop it was generally agreed that most of the useful additional features that 2.0 provides is now or very soon to be implemented in DAS 1.6E and it's subsequent incarnations and thus DAS2.0 is now considered redundant. If you wish your data to be widely accessible then use the [http://www.biodas.org/wiki/DAS1.6  The 1.6 spec] and [http://www.dasregistry.org/spec_1.53E.jsp  The 1.53E spec] documents as your guide.

== Setting up a DAS Server ==

There are several different options available for setting up a DAS server. All are either written in PERL or Java.

=== Servers available ===



{|class="wikitable" border="1"
|-
! width="100px"|Name
!Programming Language
!advantages
!disadvantages
|-
|Dazzle
|Java
|Standard implementation, includes support for extensions (structure, interaction, vol)
|Some people say it can be hard to configure and deploy if you are not used to Java web development
|-
|Proserver
|PERL
|Standard implementation includes support for extensions (structure, interaction, vol)
|
|-
|MyDAS
|Java
|Some people say it's easier to set up and configure than Dazzle
|Doesn't support extensions currently
|-
|LDAS
|PERL
|Very Easy to set up?
|Limited support for DAS functionality and sources
|}


===Dazzle ===
Dazzle is currently the standard/default implementation for Java users- however MyDas (mentioned below) is popular.

==== Dazzle Eclipse Tutorial ====

[[Dazzle_Tutorial]] This tutorial takes you through setting up Dazzle in eclipse and then shows you how to add your own plugins

==== Getting Dazzle ====

http://biojava.org/wiki/Dazzle#Getting_Dazzle The latest version from the cutting edge source code is available here from subversion:[http://www.derkholm.net/svn/repos/dazzle/  http://www.derkholm.net/svn/repos/dazzle/]

==== Using ready made plugins for datasources ====

http://biojava.org/wiki/Dazzle:plugins <font color="red">More examples needed here and tips for using mysql etc?</font> http://biojava.org/wiki/Dazzle:deployment

==== Writing your own plugin ====

http://biojava.org/wiki/Dazzle:writeplugin<br />[http://biojava.org/wiki/Dazzle:eclipse  How to write a plugin using eclipse]

==== Deploying an Ensembl Reference Server ====

[http://biojava.org/wiki/Dazzle:Ensembl  link to Ensembl reference server instructions]

=== MyDas ===

[http://code.google.com/p/mydas/ Information about MyDas can be found here.]

=== Proserver ===

[http://www.sanger.ac.uk/Software/analysis/proserver/ Proserver Page at the Sanger Institute.]<br />[http://proserver.svn.sourceforge.net/viewvc/proserver/trunk/doc/proserver_tutorial.html Proserver Tutorial]<br />[http://proserver.svn.sourceforge.net/viewvc/proserver/trunk/doc/proserver_guide.html Guide to Proserver]<br />

==Implementing the latest specs==
One of the most important additions to the recent specifications is the sources cmd. This gives essential information such as who maintains the das source and what coordinate systems it uses which is essential information for a large distributed system like DAS and is needed by the registry and clients in order to use the source correctly. Dazzle just uses a sources.xml document to serve this information that has to be written by the DAS server owner, but proserver will create a sources document for you if you specify the extra information needed in the initialisation file (proserver.ini).

Proserver example of config to implement sources cmd:

 
 coordinates = TAIR_8,Chromosome,Arabidopsis thaliana -&gt; 1:2000,3000
 properties  = key1 -&gt; value1 ; key2 -&gt; value2
 mapmaster   =
 http://www.gramene.org/das/Arabidopsis_thaliana.TAIR8.reference
 capabilities = features -&gt; 1.0

The coordinates data is taken from the coordinates/registry_coordinates.xml file, which is an archived copy of the list of coordinates available in the DAS registry. Specifying the name (or URI, actually) and test range is enough, ProServer will pick up the rest from the XML file. If the full data is not picked up, you may need to update the coordinates XML file from the registry (http://www.dasregistry.org/das/coordinatesystem). If your coordinate system is not in the Registry, an admin can add it for you.

==== Protein Annotations and Ontologies ====

For an explanation of ontologies usage within the DAS protocal look here [http://www.dasregistry.org/extension_ontology.jsp ontologies]

=== Testing your implementation ===

=== Validation and Registering of your Server ===

==== RelaxNG and other validation in the Registry ====

The DAS Registry uses [http://relaxng.org/ RelaxNG] to validate the xml responses from DAS servers before allowing them to register as a valid das source. RelaxNG is essentially a document like a dtd except that it uses an xml syntax that is easy to learn quickly. The registry uses the documents found at the following http://www.dasregistry.org/validation/ and has one document for each of the DAS commands (note you may need to right click "view the source" to see anything on these pages in a web browser) [http://www.dasregistry.org/validation/features.rng features.rng], [http://www.dasregistry.org/validation/sources.rng sources.rng], [http://www.dasregistry.org/validation/alignments.rng alignments.rng], [http://www.dasregistry.org/validation/structure.rng structure.rng], [http://www.dasregistry.org/validation/entry_points.rng entry_points.rng], [http://www.dasregistry.org/validation/interaction.rng interaction.rng], [http://www.dasregistry.org/validation/sequence.rng sequence.rng] and [http://www.dasregistry.org/validation/types.rng types.rng].

===stylesheets===
The stylesheets are specified in the specification - however some extra notes here you may find useful:
in the returned stylesheet the <BUMP> tag if not defined is <BUMP>no</BUMP>. This should be the case for features that are going to be displayed on the same line e.g. when grouping a set of features in a gene the exons should not be bumped so they appear on the same line as the other feature in that gene. However a transcript probably should be bumped so that overlapping transcripts will be displayed on separate lines ( so in this case the tag <BUMP>yes</BUMP> should be inserted).

== The DAS Registry ==

=== Introduction to the DAS Registry ===
The DAS registry can be found at http://www.dasregistry.org and serves as a central place for discovering DAS sources from around the world and for validating the sources. There is a user interface for interrogating the sources and ways for clients to also interrogate the sources. Support for searching sources based on Ontologies is likely to be included in future releases. The number of sources registered is set to increase rapidly to accommodate the ensembl genomes project data and the general increase in numbers of sequenced genomes. The registry will thus have to be modified in order to cope with this increase in data. The user interface has a warning sign next to any of the sources that have not been valid for two days or more (if this is the case, the registry will have sent an email to the administrator for the data source informing them of this fact).

=== Connecting to the Registry Programmatically ===

There are several commands that can be used to query the registry including: The sources cmd with optional parameters: label, organism, authority, capability, type and unique source_id. You can also use the organsim, coordinatesystem and lastmodified commands. For examples see [http://www.dasregistry.org/help_scripting.jsp Scripting] an example of a java classe written using Dasobert to access the Registry is here http://www.derkholm.net/svn/repos/dasobert/trunk/doc/examples/ContactRegistry.java

=== Adding a large set of data sources to the registry ===
The registry can automatically load a large set of data sources from the sources.xml that is returned from the sources cmd. If you wish to load a large set of sources you can contact dasregistry@sanger.ac.uk and ask for your data sources to be loaded. Please note that your sources must have valid coordinate systems that are in the registry and a valid sources document. You can do an initial test at http://www.dasregistry.org/validateServer.jsp and select the sources capability for your server.

==Discovering DAS sources programmatically==
The registry produces it's own sources.xml in response to the url request http://www.dasregistry.org/das1/sources and this can be used by clients to get information on the many DAS sources available around the world and what there capabililties are. Clients can now find out if the data sources are valid or not due to a "valid" tag in the prop elements returned for each source in the sources.xml from the sources request.
example snippet of a sources with a validated features cmd:
 <PROP name="valid" value="features" />

This also means that you can find out the valid capabilities of a server using soap. Here is a java example using SOAP to access the registry get the names of all the sources, their coordinate systems and their validated capabilities (considered valid by the registry which tests them approximately every 3 hours):
<pre>import org.biojava.services.das.registry.DasRegistryAxisClient;
import org.biojava.dasobert.dasregistry.DasSource;
import org.biojava.dasobert.dasregistry.DasCoordinateSystem;
import java.net.URL;

public class testWebService {

    public static void main(String[] args){
	testWebService t = new testWebService();
	try {
	    t.runTest();
	} catch (Exception e){
	    e.printStackTrace();
	}
    }

    public void runTest() throws Exception {
	
		URL u = new URL("http://www.dasregistry.org/services/das:das_directory");
	
	DasRegistryAxisClient dasregistryaxisclient= new DasRegistryAxisClient(u);
	
	DasSource[] sources = dasregistryaxisclient.listServices();
	System.out.println("got " + sources.length + " DAS servers");

	for (int i=0;i< sources.length;i++) {
	    DasSource s = sources[i];
	    System.out.println("nickname: " + s.getNickname());
	    String validCaps[]=s.getValidCapabilities();
	    for(int h=0; h<validCaps.length;h++){
	    	System.out.println("validated capability="+validCaps[h]);
	    }
	    
	    DasCoordinateSystem[] coords = s.getCoordinateSystem();
	    
	    for (int j=0; j<coords.length;j++) {
		System.out.println(coords[j].getTestCode());
	    }
	}
    }

}</pre>

== Setting up a DAS client ==

=== Currently Available DAS Clients - table? ===

{|class="wikitable" border="1"
|-
! width="100px"|Name
! Description
! Programming Language
! Links
|-
| GBrowse
|
quote from GBrowse Website "GBrowse[1] is the most popular viewer in GMOD. For a list of GBrowse and GMOD installations see the GMOD Users page. For a demo of its features, try the [http://www.wormbase.org/db/seq/gbrowse/wormbase/ WormBase], [http://flybase.org/cgi-bin/gbrowse/dmel FlyBase], or [http://projects.tcag.ca/cgi-bin/duplication/dupbrowse/human_b35 Human Genome Segmental Duplication Database] web sites. Spec DAS 1.53E and 1.6 soon
| PERL
|http://gmod.org/wiki/Gbrowse
|-
| EnsEMBL
| EnsEMBL is a web based genome browser and database system which supports DAS 1.53E and soon 1.6
| PERL
|[http://www.ensembl.org http://www.ensembl.org/]
|-
| IGB
| is an application built upon the GenoViz SDK and Genometry for visualization and exploration of genomes and corresponding annotations from multiple data sources
| Java
| http://genoviz.sourceforge.net/
|-
| Jalview
| A multiple sequence alignment editor &amp; viewer
| Java
|http://www.jalview.org/
|-
| Dasty2
| Dasty, a protein DAS client is implemented for visualising protein sequence feature information. The client is able to connect, to a reference server and one or many DAS servers. It merges the data from all the servers, and displays sequence information as well as annotated feature information form all the available DAS Servers in a very user friendly way .
| PERL and AJAX
|
http://www.ebi.ac.uk/dasty/
|}

=== Writing your own DAS client ===
Remember that if you are developing your clients behind a firewall you may need to configure your code to go through the proxy using the proxy settings - examples if this can be found in the code below.

==== A Java DAS Client Library - Dasobert ====

Examples of client code written in Java using Dasobert can be found here: http://www.derkholm.net/svn/repos/dasobert/trunk/doc/examples/

There is also a tutorial for using Dasobert within eclipse that (follows on from the Dazzle eclipse tutorial here): [[Dasobert_Tutorial]]

==== Example of walking a DAS source using perl ====

This example was kindly provided by Felix Kokocinski: You can specify a region or let it walk through all regions if the server can supply entry points with lengths. This is done in eg. 20 MB slices. It takes quite some time, but works nicely.

 
 <font color="#555500">''<nowiki># Example script that reads genomic data from DAS server </nowiki>''</font><font color="#555500">''<nowiki># using a defined chunk size </nowiki>''</font><font color="#555500">''<nowiki># writing the data out to a gff file. </nowiki>''</font>
 <font color="#555500">''<nowiki># fsk@sanger.ac.uk, 2008 </nowiki>''</font>
 <font color="#000055">'''use'''</font> strict;
 <font color="#000055">'''use'''</font> Bio::Das::Lite;
 <font color="#000055">'''use'''</font> Getopt::Long;
 
 <font color="#555500">''<nowiki>#default DAS server adress </nowiki>''</font><font color="#000055">'''my'''</font> $server = "http://das.sanger.ac.uk/das";
 <font color="#555500">''<nowiki>#default DAS source name </nowiki>''</font><font color="#000055">'''my'''</font> $source = 'otter_das';
 <font color="#555500">''<nowiki>#proxy name </nowiki>''</font><font color="#000055">'''my'''</font> $http_proxy = <font color="#000055">'''undef'''</font><nowiki>;
 </nowiki><font color="#555500">''<nowiki>#genomic chunk size to query </nowiki>''</font><font color="#000055">'''my'''</font> $max_len    = 20000000;
 
 
 <font color="#000055">'''my'''</font> $chromosome = <font color="#000055">'''undef'''</font><nowiki>;
 </nowiki><font color="#000055">'''my'''</font> $start      = 0;
 <font color="#000055">'''my'''</font> $end        = 0;
 <font color="#000055">'''my'''</font> $gff_file   = <font color="#000055">'''undef'''</font><nowiki>;
 </nowiki><font color="#000055">'''my'''</font> %transcripts = ();
 
 <font color="#000055">'''my'''</font> $type;
 
 &amp;GetOptions(
 	    'file=<font color="#000055">'''s'''</font>'                 =&gt; \$gff_file,
 	    'chromosome=<font color="#000055">'''s'''</font>'           =&gt; \$chromosome,
 	    'start=<font color="#000055">'''s'''</font>'                =&gt; \$start,
 	    'end=<font color="#000055">'''s'''</font>'                  =&gt; \$end,
             'server=<font color="#000055">'''s'''</font>'               =&gt; \$server,
             'source=<font color="#000055">'''s'''</font>'               =&gt; \$source,
 	   );
 
 <font color="#555500">''<nowiki>#connect to DAS server </nowiki>''</font><font color="#000055">'''my'''</font> $das = connect_das("$server/$source", $http_proxy);
 
 <font color="#555500">''<nowiki>#get entry point list/lengths </nowiki>''</font><font color="#555500">''<nowiki>#requires the DAS server to support the entry-points function </nowiki>''</font><font color="#000055">'''my'''</font> $chrom_lens = get_entry_points();
 
 <font color="#000055">'''open'''</font>(GFF, "&gt;$gff_file") or <font color="#000055">'''die'''</font> "Can't <font color="#000055">'''open'''</font> file $gff_file.\n";
 
 <font color="#000055">'''if'''</font>($chromosome){
   <font color="#555500">''<nowiki>#query specific region </nowiki>''</font>  get_region($chromosome, $start, $end);
 }
 <font color="#000055">'''else'''</font>{
   <font color="#555500">''<nowiki>#go through all chromosomes	 </nowiki>''</font>  <font color="#000055">'''foreach'''</font> <font color="#000055">'''my'''</font> $chrom (<font color="#000055">'''keys'''</font> %$chrom_lens){
 	<font color="#000055">'''print'''</font> "getting $chrom\n";
 	get_region($chrom, <font color="#000055">'''undef'''</font>, <font color="#000055">'''undef'''</font>);
 	%transcripts = ();
   }
 }
 
 
 <font color="#000055">'''close'''</font>(GFF)or <font color="#000055">'''die'''</font> "Can't <font color="#000055">'''close'''</font> file $gff_file.\n";
 
 
   <font color="#555500">''<nowiki>################################################ </nowiki>''</font>
 
 <font color="#555500">''<nowiki>#connect to DAS server </nowiki>''</font><font color="#000055">'''sub'''</font> connect_das {
   <font color="#000055">'''my'''</font> ($dsn, $proxy) = @_;
 
   <font color="#000055">'''my'''</font> $das = Bio::Das::Lite-&gt;new({
 				 'timeout'    =&gt; 10000,
 				 'dsn'        =&gt; $dsn,
 				 'http_proxy' =&gt; $proxy,
 				}) or <font color="#000055">'''die'''</font> "cant <font color="#000055">'''connect'''</font> to DAS server!\n";
 
   <font color="#000055">'''return'''</font> $das;
 }
 
 
 
 <font color="#555500">''<nowiki>#look at the region requested </nowiki>''</font><font color="#000055">'''sub'''</font> get_region {
   <font color="#000055">'''my'''</font> ($chromosome, $start, $end) = @_;
 
   <font color="#000055">'''my'''</font> $chrom_len    = $chrom_lens-&gt;{$chromosome};
   <font color="#000055">'''my'''</font> $region       = "";
 
   <font color="#000055">'''if'''</font>( $start and $end){
     <font color="#000055">'''if'''</font>($start &gt; $end){
       <font color="#000055">'''die'''</font> "Coordinates wrong: $start &gt; $end!\n";
     }
     <font color="#000055">'''if'''</font>( ($end - $start) &lt;= $max_len ){
       <font color="#555500">''<nowiki>#get entire region </nowiki>''</font>      <font color="#000055">'''my'''</font> $region = ":".$start.",".$end;
       get_transcripts($region, $chromosome);
     }
     <font color="#000055">'''else'''</font>{
       go_through_chunks($start, $end, $chromosome, $chrom_len);
     }
   }
   <font color="#000055">'''elsif'''</font>( $chrom_len &lt;= $max_len ){
     <font color="#555500">''<nowiki>#get entire chromosome </nowiki>''</font>    get_transcripts($region, $chromosome);
   }
   <font color="#000055">'''else'''</font>{
     go_through_chunks(1, $chrom_len, $chromosome, $chrom_len);
   }
 
 }
 
 
 <font color="#555500">''<nowiki>#go through a region in chunks </nowiki>''</font><font color="#000055">'''sub'''</font> go_through_chunks {
   <font color="#000055">'''my'''</font> ($chunk_start, $chunk_end, $chromosome, $chrom_len) = @_;
 
   <font color="#000055">'''my'''</font> ($region_start, $region_end);
   <font color="#000055">'''my'''</font> %ids_seen;
 
   <font color="#555500">''<nowiki>#loop through regions until all is covered </nowiki>''</font>  <font color="#555500">''<nowiki>#keep track of genes to avoid duplicates! </nowiki>''</font>  <font color="#000055">'''for'''</font>($region_start = $chunk_start, $region_end = $region_start   $max_len;
       $region_start &lt; $chunk_end;
       $region_start = $region_end   1, $region_end  = $max_len){
 
     <font color="#000055">'''if'''</font>($region_end &gt; $chrom_len){
       $region_end = $chrom_len;
     }<font color="#000055">'''elsif'''</font>($region_end &gt; $chunk_end){
       $region_end = $chunk_end;
     }
     <font color="#000055">'''my'''</font> $region = ":".$region_start.",".$region_end;
 
     <font color="#555500">''<nowiki>#get all transcripts from chunk </nowiki>''</font>    <font color="#000055">'''my'''</font> $new_ids = get_transcripts($region, $chromosome, \%ids_seen);
     %ids_seen = (%ids_seen, %$new_ids);
   }
 
 }
 
 
 
 <font color="#555500">''<nowiki>#fetch all available entry-points (chromosomes) and their lengths from server </nowiki>''</font><font color="#000055">'''sub'''</font> get_entry_points {
 
   <font color="#000055">'''my'''</font> %chrom_lens;
 
   <font color="#000055">'''my'''</font> $entry_points = $das-&gt;entry_points();
 
   <font color="#000055">'''foreach'''</font> <font color="#000055">'''my'''</font> $k (<font color="#000055">'''keys'''</font> %$entry_points){
 	<font color="#000055">'''foreach'''</font> <font color="#000055">'''my'''</font> $l (@{$entry_points-&gt;{$k}}){
 		<font color="#000055">'''foreach'''</font> <font color="#000055">'''my'''</font> $segment (@{ $l-&gt;{"segment"} }){
 			$chrom_lens{ $segment-&gt;{"segment_id"} } = $segment-&gt;{"segment_size"};
 		}
   	}
   }
 
   <font color="#000055">'''return'''</font> \%chrom_lens;
 }
 
 
 
 <font color="#555500">''<nowiki>#fetch the data and process it. </nowiki>''</font><font color="#555500">''<nowiki>#note that this function is quite specific to the way your DAS source is set-up. </nowiki>''</font><font color="#555500">''<nowiki>#the idea is to get together all exons, etc that belong to a transcript and all transcripts </nowiki>''</font><font color="#555500">''<nowiki>#that belong to a gene. </nowiki>''</font><font color="#000055">'''sub'''</font> get_transcripts {
   <font color="#000055">'''my'''</font> ( $region, $chromosome, $previous_genes ) = @_;
 
   <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "have <font color="#000055">'''chr'''</font> $chromosome$region\n";
 
   <font color="#000055">'''my'''</font> %genes = ();
   <font color="#000055">'''my'''</font> %new_features = ();
   <font color="#000055">'''my'''</font> $response = <font color="#000055">'''undef'''</font><nowiki>;
 
   </nowiki><font color="#555500">''<nowiki>#fetch DAS features </nowiki>''</font>  $response = $das-&gt;features({
 			      'segment' =&gt; $chromosome.$region,
 			      'type'    =&gt; $type,
 			     });
 
   <font color="#000055">'''while'''</font> (<font color="#000055">'''my'''</font> ($url, $features) = <font color="#000055">'''each'''</font> %$response) {
 
     <font color="#000055">'''if'''</font>(<font color="#000055">'''ref'''</font> $features <font color="#000055">'''eq'''</font> "ARRAY"){
       <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "Received ".<font color="#000055">'''scalar'''</font> @$features." features.\n";
 
     FEATURES:
       <font color="#000055">'''foreach'''</font> <font color="#000055">'''my'''</font> $feature (@$features) {
 
 	<font color="#000055">'''my'''</font> %notes = ();
 
 	<font color="#000055">'''my'''</font> $grouphash = $feature-&gt;{'group'}-&gt;[0];
 
 	<font color="#555500">''<nowiki>#get other notes </nowiki>''</font>	<font color="#000055">'''my'''</font> $i = 0;
 	<font color="#000055">'''my'''</font><nowiki> $morenote_entry = '';
 	</nowiki><font color="#000055">'''while'''</font>(<font color="#000055">'''defined'''</font>($feature-&gt;{'note'}-&gt;[$i])){
 	  <font color="#000055">'''my'''</font> $morenotes = $feature-&gt;{'note'}-&gt;[$i];
 	  <font color="#000055">'''my'''</font> ($morenotes_type, $morenotes_value) = <font color="#000055">'''split'''</font>('=', $morenotes);
 	  $morenotes_value =~ <font color="#000055">'''s'''</font>/\&amp;\<font color="#555500">''<nowiki>#39\;/\'/g; </nowiki>''</font>	  $notes{$morenotes_type} = $morenotes_value;
 	  $i  ;
 	}
 
 	<font color="#555500">''<nowiki>#remove duplicates from overlapping regions </nowiki>''</font>	<font color="#000055">'''if'''</font>(<font color="#000055">'''defined'''</font> $previous_genes and <font color="#000055">'''exists'''</font>($previous_genes-&gt;{$grouphash-&gt;{'group_type'}})){
 	  <font color="#000055">'''next'''</font> FEATURES;
 	}
 
 	<font color="#555500">''<nowiki>#you could do some filtering of the response at this point </nowiki>''</font>
 	<font color="#000055">'''my'''</font> %gff_element;
 
 	<font color="#555500">''<nowiki>#build structure for exons and general items </nowiki>''</font>	<font color="#555500">''<nowiki>#find type </nowiki>''</font>	<font color="#000055">'''my'''</font> $element_type = $feature-&gt;{'type'} || "exon";
 	$element_type    =~ <font color="#000055">'''m'''</font>/((intron)|(UTR)|(exon))/g;
 	<font color="#000055">'''if'''</font>($1){ $element_type = $1 }
 
 	<font color="#000055">'''my'''</font> $group_type   = $grouphash-&gt;{'group_type'};
 
 	<font color="#000055">'''my'''</font> $strand       = $feature-&gt;{'orientation'};
 	<font color="#000055">'''if'''</font>($feature-&gt;{'orientation'}    =~ /^(\ |\-|\.)$/) {  }
 	<font color="#000055">'''elsif'''</font>($feature-&gt;{'orientation'} ==  1){ $strand = ' ' }
 	<font color="#000055">'''elsif'''</font>($feature-&gt;{'orientation'} == -1){ $strand = '-' }
 	<font color="#000055">'''elsif'''</font>($feature-&gt;{'orientation'} ==  0){ $strand = '.' }
 	<font color="#000055">'''else'''</font>{ <font color="#000055">'''die'''</font> "INVALID STRAND SYMBOL: ".$feature-&gt;{'orientation'}."\n"; }
 
 	<font color="#000055">'''my'''</font> $phase        = ".";
 	<font color="#000055">'''if'''</font>($feature-&gt;{'phase'}){
 	  $phase = $feature-&gt;{'phase'};
 	}
 	<font color="#000055">'''elsif'''</font>($element_type <font color="#000055">'''eq'''</font> "exon"){
 	  $phase = "0";
 	}
 
 	<font color="#000055">'''if'''</font>(!$notes{"Transcriptstatus"}){
 	  <font color="#000055">'''die'''</font> "PROBLEM: $element_type, ".$feature-&gt;{'feature_id'}."\n";
 	}
 
 	$gff_element{'seqid'}      = $chromosome;
 	$gff_element{'source'}     = $notes{"Transcripttype"};
 	$gff_element{'type'}       = $element_type;
 	$gff_element{'start'}      = $feature-&gt;{'start'};
 	$gff_element{'end'}        = $feature-&gt;{'end'};
 	$gff_element{'score'}      = ".";
 	$gff_element{'strand'}     = $strand;
 	$gff_element{'phase'}      = $phase;
 
 	<font color="#555500">''<nowiki>#check for some missing values </nowiki>''</font>	<font color="#000055">'''if'''</font>(!<font color="#000055">'''exists'''</font> $feature-&gt;{'feature_id'}){
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "Missing value <font color="#000055">'''for'''</font> Parent-feature_id\n";
 	  $feature-&gt;{'feature_id'} = "0";
 	}
 	<font color="#000055">'''if'''</font>(!<font color="#000055">'''exists'''</font> $notes{"Transcriptstatus"}){
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "Missing value <font color="#000055">'''for'''</font> Transcriptstatus\n";
 	  $notes{"Transcriptstatus"} = "-";
 	}
 	<font color="#000055">'''if'''</font>(!<font color="#000055">'''exists'''</font> $notes{"Created"}){
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "Missing value <font color="#000055">'''for'''</font> Created\n";
 	  $notes{"Created"} = 0;
 	}
 	<font color="#000055">'''if'''</font>(!<font color="#000055">'''exists'''</font> $notes{"Lastmod"}){
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "Missing value <font color="#000055">'''for'''</font> Lastmod\n";
 	  $notes{"Lastmod"} = 0;
 	}
 	$gff_element{'attributes'} = "Parent=".$feature-&gt;{'feature_id'}.
 	                             ";Status=".$notes{"Transcriptstatus"}.
 				     ";CREATED=".$notes{"Created"}.
 				     ";LASTMOD=".$notes{"Lastmod"};
 
 	<font color="#000055">'''if'''</font>(!<font color="#000055">'''exists'''</font> $genes{ $group_type }){
 	  $genes{ $group_type } = 1;
 	  <font color="#000055">'''my'''</font> %gff_gene;
 
           <font color="#000055">'''my'''</font> $gene_region = $feature-&gt;{'target'};
           <font color="#000055">'''my'''</font> ($gs, $gene_loc) = <font color="#000055">'''split'''</font>('\=', $gene_region);
 	  <font color="#000055">'''my'''</font> ($gene_start, $gene_end) = <font color="#000055">'''split'''</font>('\-', $gene_loc);
 
 	  <font color="#555500">''<nowiki>#build structure for gene </nowiki>''</font>	  $gff_gene{'seqid'}      = $chromosome;
 	  $gff_gene{'source'}     = $notes{"Genetype"};
 	  $gff_gene{'type'}       = "gene";
 	  $gff_gene{'start'}      = $gene_start;
 	  $gff_gene{'end'}        = $gene_end;
 	  $gff_gene{'score'}      = ".";
 	  $gff_gene{'strand'}     = $strand;
 	  $gff_gene{'phase'}      = ".";
 
 	  <font color="#555500">''<nowiki>#get gene description </nowiki>''</font>	  <font color="#000055">'''my'''</font> $description = "";
 	  <font color="#000055">'''foreach'''</font> <font color="#000055">'''my'''</font> $gnote (@{$grouphash-&gt;{'note'}}){
 	    <font color="#000055">'''my'''</font> ($gnote_s, $gnote_string) = <font color="#000055">'''split'''</font>('=', $gnote);
 	    <font color="#000055">'''if'''</font>($gnote_s <font color="#000055">'''eq'''</font> "DESCR"){
 	      $description = ";Description=".$gnote_string;
 	    }
 	  }
 	  $gff_gene{'attributes'} = "ID=".$grouphash-&gt;{'group_type'}.
 	                            $description.
 				    ";Status=".$notes{"Genestatus"}.
 	                            ";CREATED=".$notes{"Created"}.
 				    ";LASTMOD=".$notes{"Lastmod"};
 
 	  <font color="#555500">''<nowiki>#print entry for transcript </nowiki>''</font>	  print_gff_line(\%gff_gene);
 	  %gff_gene = ();
 
 	  $new_features{$grouphash-&gt;{'group_type'}} = 1;
 
 	}
 
 	<font color="#000055">'''if'''</font>(!<font color="#000055">'''exists'''</font> $transcripts{ $feature-&gt;{'feature_id'} }){
 	  $transcripts{ $feature-&gt;{'feature_id'} } = 1;
 	  <font color="#000055">'''my'''</font> %gff_transcript;
 
 	  <font color="#555500">''<nowiki>#build structure for transcript </nowiki>''</font>	  $gff_transcript{'seqid'}      = $chromosome;
 	  $gff_transcript{'source'}     = $notes{"Transcripttype"};
 	  $gff_transcript{'type'}       = "transcript";
 	  $gff_transcript{'start'}      = $feature-&gt;{'target_start'};
 	  $gff_transcript{'end'}        = $feature-&gt;{'target_stop'};
 	  $gff_transcript{'score'}      = ".";
 	  $gff_transcript{'strand'}     = $strand;
 	  $gff_transcript{'phase'}      = ".";
 	  $gff_transcript{'attributes'} = "ID=".$feature-&gt;{'feature_id'}.";Alias1=".$feature-&gt;{'target_id'}.
 	                                  ";Parent=".$grouphash-&gt;{'group_type'}.
 					  ";CREATED=".$notes{"Created"}.
 					  ";LASTMOD=".$notes{"Lastmod"}.
 					  ";Status=".$notes{"Transcriptstatus"};
 
 	  <font color="#555500">''<nowiki>#print entry for transcript </nowiki>''</font>	  print_gff_line(\%gff_transcript);
 	  %gff_transcript = ();
 	}
 	<font color="#555500">''<nowiki>#else{ print STDERR "_" } </nowiki>''</font>
 	<font color="#555500">''<nowiki>#print entry for exons, etc. </nowiki>''</font>	<font color="#000055">'''if'''</font>($feature-&gt;{'type_category'} =~ /error/){
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> "Found an error feature:\n";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'seqid'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'source'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'type'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'start'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'end'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'score'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'strand'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'phase'}."\t";
 	  <font color="#000055">'''print'''</font> <font color="#000055">'''STDERR'''</font> $gff_element{'attributes'}."\n";
 	} <font color="#000055">'''else'''</font> {
 	  print_gff_line(\%gff_element);
 	  %gff_element = ();
 	}
 
 	$feature = <font color="#000055">'''undef'''</font><nowiki>;
       }
       @$features = ();
       $features  = </nowiki><font color="#000055">'''undef'''</font><nowiki>;
     }
   }
 
   </nowiki><font color="#000055">'''return'''</font> \%new_features;
 }
 
 
 
 <font color="#555500">''<nowiki>#print the different data types as GFF </nowiki>''</font><font color="#000055">'''sub'''</font> print_gff_line {
   <font color="#000055">'''my'''</font> ($element) = @_;
 
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'seqid'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'source'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'type'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'start'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'end'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'score'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'strand'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'phase'}."\t";
   <font color="#000055">'''print'''</font> GFF $element-&gt;{'attributes'}."\n";
 }

==Acknowledgments==

(some of this document may have been cut an pasted from documentation contributed by the following people):

* Andreas Prlic
* Andy Jenkinson
* Phil Jones
* Tim Hubbard
* Lincoln Stein
* Thomas Down